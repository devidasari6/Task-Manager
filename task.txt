<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Task Manager</h1>
        <div class="task-form">
            <input type="text" id="task-input" placeholder="Enter task...">
            <button id="add-task-btn">Add Task</button>
        </div>
        <div class="filters">
            <label for="filter-select">Filter by status:</label>
            <select id="filter-select">
                <option value="all">All</option>
                <option value="completed">Completed</option>
                <option value="pending">Pending</option>
            </select>
        </div>
        <ul id="task-list" class="task-list">
            <!-- Tasks will be dynamically added here -->
        </ul>
    </div>

    <script src="script.js"></script>
</body>
</html>
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 600px;
  margin: 20px auto;
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
  margin-bottom: 20px;
}

.task-form {
  display: flex;
  margin-bottom: 20px;
}

.task-form input[type="text"] {
  flex: 1;
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-right: 10px;
}

.task-form button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #4caf50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.filters {
  margin-bottom: 10px;
}

.filters label {
  font-weight: bold;
}

.filters select {
  padding: 8px;
  font-size: 14px;
}

.task-list {
  list-style-type: none;
  padding: 0;
}

.task-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ccc;
  padding: 10px 0;
}

.task-item:last-child {
  border-bottom: none;
}

.task-item .task-name {
  flex: 1;
}

.task-item button {
  background-color: #f44336;
  color: #fff;
  border: none;
  padding: 5px 10px;
  border-radius: 4px;
  cursor: pointer;
}

.task-item .edit-btn {
  background-color: #ffc107;
  margin-right: 5px;
}

.task-item .complete-btn {
  background-color: #4caf50;
  margin-right: 5px;
}
// Task manager application logic
let tasks = [];

// DOM elements
const taskInput = document.getElementById('task-input');
const addTaskBtn = document.getElementById('add-task-btn');
const taskList = document.getElementById('task-list');
const filterSelect = document.getElementById('filter-select');

// Event listeners
addTaskBtn.addEventListener('click', addTask);
filterSelect.addEventListener('change', filterTasks);

// Functions
function addTask() {
    const taskName = taskInput.value.trim();
    if (taskName === '') {
        alert('Please enter a task!');
        return;
    }

    const newTask = {
        id: Date.now(),
        name: taskName,
        completed: false
    };

    tasks.push(newTask);
    renderTasks();
    taskInput.value = '';
}

function renderTasks(filteredTasks = tasks) {
    taskList.innerHTML = '';

    filteredTasks.forEach(task => {
        const taskItem = document.createElement('li');
        taskItem.className = 'task-item';
        taskItem.innerHTML = `
            <span class="task-name">${task.name}</span>
            <button class="edit-btn" onclick="editTask(${task.id})">Edit</button>
            <button class="complete-btn" onclick="toggleComplete(${task.id})">${task.completed ? 'Undo' : 'Complete'}</button>
            <button class="delete-btn" onclick="deleteTask(${task.id})">Delete</button>
        `;
        taskList.appendChild(taskItem);
    });
}

function deleteTask(taskId) {
    tasks = tasks.filter(task => task.id !== taskId);
    renderTasks();
}

function toggleComplete(taskId) {
    const selectedTask = tasks.find(task => task.id === taskId);
    if (selectedTask) {
        selectedTask.completed = !selectedTask.completed;
        renderTasks();
    }
}

function editTask(taskId) {
    const selectedTask = tasks.find(task => task.id === taskId);
    if (selectedTask) {
        const newTaskName = prompt('Edit task:', selectedTask.name);
        if (newTaskName) {
            selectedTask.name = newTaskName.trim();
            renderTasks();
        }
    }
}

function filterTasks() {
    const status = filterSelect.value;
    let filteredTasks = [];

    switch (status) {
        case 'completed':
            filteredTasks = tasks.filter(task => task.completed);
            break;
        case 'pending':
            filteredTasks = tasks.filter(task => !task.completed);
            break;
        default:
            filteredTasks = tasks;
    }

    renderTasks(filteredTasks);
}

// Initial render
renderTasks();
